# DDL(create, alter, drop) 등을 생성하는 방법 결정
spring.jpa.hibernate.ddl-auto=create-drop
# JPA의 구현체인 Hibernate가 동작하면서 발생하는 SQL을 포맷팅해서 출력
spring.jpa.properties.hibernate.format_sql=true
# 처리 시에 발생하는 SQL을 보여줄 것인지 결정
spring.jpa.show-sql=true
# VIEW - FOR VIEW CHOICE
spring.devtools.livereload.enabled=true
spring.freemarker.cache=false
spring.thymeleaf.cache=false
# Close Open Session In View Pattern
spring.jpa.open-in-view=false
# VIEW - PREFIX LOCATION
spring.thymeleaf.prefix=file:src/main/resources/templates/
spring.resource.static-locations=file:src/main/resources/static/
# VIEW - PREFIX FILE
spring.thymeleaf.suffix=.html
# Database Setup
spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/mulmul?characterEncoding=UTF-8&serverTimezone=UTC&allowMultiQueries=true&autoReconnection=true
spring.datasource.username=root
spring.datasource.password=1234

# OAuth 2.0 Kakao registration
#spring.security.oauth2.client.registration.kakako.client-id=d92829ecad2a5d0ce76c625e51fb69fd
#spring.security.oauth2.client.registration.kakao.client-secret=Ypci88I5ZH972E3ioPtwbmIQYTuTrWWN
#spring.security.oauth2.client.registration.kakao.redirect-uri=http://localhost:8080/auth/oauth/kakao
#spring.security.oauth2.client.registration.kakao.client-authentication-method=POST
#spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
#spring.security.oauth2.client.registration.kakao.scope= profile_nickname, profile_image, account_email, kakao_account.birthday, kakao_account.gender
#spring.security.oauth2.client.registration.kakao.client-name=Kakao

# OAuth 2.0 Kakao provider
#spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
#spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
#spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
#spring.security.oauth2.client.provider.kakao.user-name-attribute=id